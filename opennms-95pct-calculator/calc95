#!/usr/bin/groovy

/**
 * Groovy script that allows polling 95pct data from a set of snmpinterface ids (from OpenNMS' pgsql database)
 * Allows optional creation of png graphs of the requested period, or dumping the data from all jrobin files.
 * 
 * @author Brynjar Eide <brynjar@availo.no>
 * @version 1.1, 20130104
 */
import org.jrobin.core.*;
import org.jrobin.graph.*;
import java.awt.*;
import org.jrobin.data.*;
import java.util.*;
import java.text.SimpleDateFormat;
import org.apache.commons.cli.Option;
import org.apache.commons.lang.StringUtils;
import groovy.sql.Sql;

/*
 * Configuration options
 */
// Where to save the optional png files (Used when '-g <filename>' parameter is specified)
def pngroot = '/tmp/calc95/png/'; // Remember / as a suffix
// OpenNMS' jrobin root folder
def jrbroot = '/usr/share/opennms/share/rrd/snmp/'; // Remember / as a suffix
def useMonthlySubfolders = true; // Whether to create a new folder every month. The alternative is to put the period (YYYY-MM) in the filename.

/*
 * YYYY-MM formatted string, used for (optional) graph folder or filename.
 * It will also be prefixed in front of the actual 95pct usage when printing this.
 */
def dateTextFormat = 'yyyy-MM'; // Default: yyyy-MM.

// Database settings
def dbuser = 'calc95';    // Username used when connecting to the database
def dbpass = 'secret';    // Password used when connecting to the database
def dbname = 'opennms';   // Name of the database
def dbhost = 'localhost'; // Hostname of the database
def dbport = 5432;

GregorianCalendar cal = new GregorianCalendar();
// Since MONTH starts on 0 (January), we will use the "wrong" fromMonth, and instead always subtract 1 month later whenever we generate the dat.
// (So that when the user types in 7, which really means August, the program will subtract 1 and use July instead.)
def fromYear = cal.get(Calendar.YEAR);
def fromMonth = cal.get(Calendar.MONTH);
cal.set(fromYear, fromMonth - 1, 1, 00, 00, 00);
def defaultYear = new SimpleDateFormat("yyyy").format(cal.getTime());
def defaultMonth = new SimpleDateFormat("MM").format(cal.getTime());

def cli = new CliBuilder(usage:'calc95 [options] <snmp interface id> [,<more snmp interface ids>]');
cli.h(longOpt:'help', 'This help menu');
cli.d(longOpt:'debug', 'Debug output');
cli.x(longOpt:'export', 'Export (dump) the jrobin data');
cli.y(longOpt:'year', args:1, argName:'YYYY', 'Year (' + defaultYear + ')'); // default to current year
cli.m(longOpt:'month', args:1, argName:'M|MM', 'Month (' + defaultMonth + ')'); // default to previous month.
cli.g(longOpt:'graph', args:1, argName: 'filename', 'Create png graph');
cli.footer = '\nTo format the exported data, use awk: ./calc95 -x <id1>[, id2, id3] | \\\n awk \'{if ($0 != \"\") print $1,\"\\t\",$(NF-1),\"\\t\",$NF}\'';

def options = cli.parse(args);

if (options.h) {
	cli.usage();
	return;
}

if (options.y) {
	fromYear = Integer.parseInt(options.y);
}

if (options.m) {
	fromMonth = Integer.parseInt(options.m);
}
def hasInterfaces = false;

if (options.arguments()) {
	hasInterfaces = true;
}
if (!hasInterfaces) {
	cli.usage();
	println("\nError: One or more interfaces (-r or -i) are required.");
	return;
}

// Use fromYear and fromMonth (possibly overwritten from shell arguments) to figure out what period to look at
cal.set(fromYear, fromMonth - 1, 1, 00, 00, 00);
Date startTime = cal.getTime();

cal.set(fromYear, fromMonth, 0, 23, 59, 59);
Date endTime = cal.getTime();
if (options.d) {
	println(startTime);
	println(endTime);
}

String dateText = new SimpleDateFormat(dateTextFormat).format(endTime);

def sql = Sql.newInstance("jdbc:postgresql://" + dbhost + ":" +
       dbport + "/" + dbname, dbuser, dbpass, 
       "org.postgresql.Driver");

def intTotalInterfaces = 1;
def arrPaths = new HashMap();

if (options.arguments()) {
	// @FIXME You *absolutely* need to rewrite this SQL query to validate the arguments if you're allowing untrusted users access to this script!
	def interfaceSQL = "SELECT snmpinterface.nodeid,node.nodesysoid,snmpinterface.snmpifname,snmpinterface.snmpphysaddr " +
				"\n FROM node,snmpinterface WHERE node.nodeid=snmpinterface.nodeid AND id IN (" + 
				StringUtils.join(options.arguments(), ',') + 
				")\n ORDER BY snmpinterface.nodeid ASC, snmpinterface.snmpifname ASC";
	if (options.d) {
		println(interfaceSQL);
	}
	sql.eachRow interfaceSQL, {row-> 
		def jrbfolder = row.snmpifname.replaceAll('/', '_').replaceAll('\\.', '_');
		def snmpifname = row.snmpifname;
		def nodeid = row.nodeid;
		def nodesysoid = row.nodesysoid;
		def reverse = 0;

		/*
		 * Use the system OID to guess what direction the interface is, and thereby add it to the correct "side" of the graph.
		 * 
		 * Switches / routers:
		 * - In  = traffic flows towards the switch/router
		 * - Out = traffic goes out from the switch/router
		 * 
		 * Servers (NET-SNMP):
		 * - In  = traffic goes out from the switch/router (towards the server)
		 * - Out = traffic flows towards the switch/router (away from the server)
		 */
		if (nodesysoid.substring(0,18) == '.1.3.6.1.4.1.8072.') {
			if (options.d) {
				println("[" + nodeid + " => " + snmpifname + "]:\tWe found a NET-SNMP interface - reversing the in/out octets for this interface.");
			}
			reverse = 1;
		}

		if (row.snmpphysaddr) {
			jrbfolder += '-' + row.snmpphysaddr;
		}
		if (options.d) {
			println('(' + intTotalInterfaces + ') ' + nodeid + ': ' + jrbfolder);
		}
		arrPaths.put('InOctets' + intTotalInterfaces, jrbroot + nodeid + '/' + jrbfolder + '/ifHCInOctets.jrb');
		arrPaths.put('OutOctets' + intTotalInterfaces, jrbroot + nodeid + '/' + jrbfolder + '/ifHCOutOctets.jrb');
		arrPaths.put('Operation' + intTotalInterfaces, '+');
		arrPaths.put('Reverse' + intTotalInterfaces, reverse);
		intTotalInterfaces++;
	}
}

// Setup a dataprocessor to work on the data
DataProcessor dp = new DataProcessor((int)(startTime.getTime()/1000), (int)(endTime.getTime()/1000));

def rrdDef = new RrdGraphDef();

if (options.g) {
	if (useMonthlySubfolders) {
		pngroot += dateText + '/';
		filename = pngroot + options.g + ".png";
	}
	else {
		filename = pngroot + dateText + '_' + options.g + ".png";
	}
	if (options.d) {
		println(filename);
	}
	def checkFolder  = new File(pngroot);
	if (!checkFolder.exists()) {
		if (options.d) {
			println("Creating folder '" + pngroot + "'");
		}
		checkFolder.mkdirs();
	}
	rrdDef.setFilename(filename);
}

rrdDef.setTimeSpan((int)(startTime.getTime()/1000), (int)(endTime.getTime()/1000));
rrdDef.setTitle("Traffic graph with 95th percentiles");

i = 1;
strAllInOctets = '';
strAllOutOctets = '';
strAllInOctetsMin = '';
strAllOutOctetsMin = '';
strAllInOctetsMax = '';
strAllOutOctetsMax = '';

while (i < intTotalInterfaces) {
	strOperation = arrPaths.get('Operation' + i);
	intReverse = arrPaths.get('Reverse' + i);
	if (intReverse) {
		rrdIn = arrPaths.get('OutOctets' + i);
		rrdOut = arrPaths.get('InOctets' + i);
		strIfIn = "ifHCOutOctets";
		strIfOut = "ifHCInOctets";
	}
	else {
		rrdIn = arrPaths.get('InOctets' + i);
		rrdOut = arrPaths.get('OutOctets' + i);
		strIfIn = "ifHCInOctets";
		strIfOut = "ifHCOutOctets";
	}
	if (options.d) {
		println(rrdIn);
		println(rrdOut);
	}
     
	dp.addDatasource("octIn" + i + "NaN",rrdIn, strIfIn, "AVERAGE");
	dp.addDatasource("octIn" + i,"octIn" + i + "NaN,UN,0,octIn" + i + "NaN,IF");

	rrdDef.datasource("octIn" + i + "NaN",rrdIn, strIfIn, "AVERAGE");
	rrdDef.datasource("octIn" + i,"octIn" + i + "NaN,UN,0,octIn" + i + "NaN,IF");

	rrdDef.datasource("minOctIn" + i + "NaN",rrdIn, strIfIn, "MIN");
	rrdDef.datasource("minOctIn" + i,"minOctIn" + i + "NaN,UN,0,minOctIn" + i + "NaN,IF");

	rrdDef.datasource("maxOctIn" + i + "NaN", rrdIn, strIfIn, "MAX");
	rrdDef.datasource("maxOctIn" + i,"maxOctIn" + i + "NaN,UN,0,maxOctIn" + i + "NaN,IF");

	dp.addDatasource("octOut" + i + "NaN", rrdOut, strIfOut, "AVERAGE");
	dp.addDatasource("octOut" + i,"octOut" + i + "NaN,UN,0,octOut" + i + "NaN,IF");

	rrdDef.datasource("octOut" + i + "NaN", rrdOut, strIfOut, "AVERAGE");
	rrdDef.datasource("octOut" + i,"octOut" + i + "NaN,UN,0,octOut" + i + "NaN,IF");

	rrdDef.datasource("minOctOut" + i + "NaN", rrdOut, strIfOut, "MIN");
	rrdDef.datasource("minOctOut" + i,"minOctOut" + i + "NaN,UN,0,minOctOut" + i+ "NaN,IF");

	rrdDef.datasource("maxOctOut" + i + "NaN", rrdOut, strIfOut, "MAX");
	rrdDef.datasource("maxOctOut" + i,"maxOctOut" + i + "NaN,UN,0,maxOctOut" + i + "NaN,IF");

	if (i > 1) {
		strAllInOctets += ',';
		strAllOutOctets += ',';
		strAllInOctetsMin += ',';
		strAllOutOctetsMin += ',';
		strAllInOctetsMax += ',';
		strAllOutOctetsMax += ',';
	}

	if (i > 2) {
		strAllInOctets += strOperation + ',';
		strAllOutOctets += strOperation + ',';
		strAllInOctetsMin += strOperation + ',';
		strAllOutOctetsMin += strOperation + ',';
		strAllInOctetsMax += strOperation + ',';
		strAllOutOctetsMax += strOperation + ',';
	}

	if (strOperation.equals('+')) {
		strAllInOctets += 'octIn' + i;
		strAllOutOctets += 'octOut' + i;
		strAllInOctetsMin += 'minOctIn' + i;
		strAllOutOctetsMin += 'minOctOut' + i;
		strAllInOctetsMax += 'maxOctIn' + i;
		strAllOutOctetsMax += 'maxOctOut' + i;
	}

	else if (strOperation.equals('-')) {
		strAllInOctets += 'octOut' + i;
		strAllOutOctets += 'octIn' + i;
		strAllInOctetsMin += 'minOctOut' + i;
		strAllOutOctetsMin += 'minOctIn' + i;
		strAllInOctetsMax += 'maxOctOut' + i;
		strAllOutOctetsMax += 'maxOctIn' + i;
	}


	i++;
}
if (options.d) {
	println(strAllInOctets);
	println(strAllOutOctets);
}

// intTotalInterfaces begins at 1, same with 'i'. Just subtract one, to get the actual number.
if ((intTotalInterfaces-1) == 1) {
	dp.addDatasource("octIn", strAllInOctets + ",1,*");
	dp.addDatasource("octOut", strAllOutOctets + ",1,*");
	dp.addDatasource("octIn", strAllInOctets + ",1,*");
	dp.addDatasource("octOut", strAllOutOctets + ",1,*");
}
else {
	dp.addDatasource("octIn", strAllInOctets + "," + strOperation);
	dp.addDatasource("octOut", strAllOutOctets + "," + strOperation);
	dp.addDatasource("octIn", strAllInOctets + "," + strOperation);
	dp.addDatasource("octOut", strAllOutOctets + "," + strOperation);
}
dp.addDatasource("rawbitsIn", "octIn,8,*");
dp.addDatasource("rawbitsOut", "octOut,8,*");
dp.processData();

// intTotalInterfaces begins at 1, same with 'i'. Just subtract one, to get the actual number.
if ((intTotalInterfaces-1) == 1) {
	rrdDef.datasource("octIn", strAllInOctets + ",1,*");
	rrdDef.datasource("minOctIn", strAllInOctetsMin + ",1,*");
	rrdDef.datasource("maxOctIn", strAllInOctetsMax + ",1,*");
	rrdDef.datasource("octOut", strAllOutOctets + ",1,*");
	rrdDef.datasource("minOctOut", strAllOutOctetsMin + ",1,*");
	rrdDef.datasource("maxOctOut", strAllOutOctetsMax + ",1,*");
}
else {
	rrdDef.datasource("octIn", strAllInOctets + "," + strOperation);
	rrdDef.datasource("minOctIn", strAllInOctetsMin + "," + strOperation);
	rrdDef.datasource("maxOctIn", strAllInOctetsMax + "," + strOperation);
	rrdDef.datasource("octOut", strAllOutOctets + "," + strOperation);
	rrdDef.datasource("minOctOut", strAllOutOctetsMin + "," + strOperation);
	rrdDef.datasource("maxOctOut", strAllOutOctetsMax + "," + strOperation);
}

// Get the 95pct of the following datasources
in95 = dp.getPercentile("rawbitsIn");
out95 = dp.getPercentile("rawbitsOut");

// max95 will be printed to cli
max95 = out95;
if (out95 < in95) {
        max95 = in95;
}

// Create the graph
rrdDef.datasource("rawbitsIn", "octIn,8,*");
rrdDef.datasource("minRawbitsIn", "minOctIn,8,*");
rrdDef.datasource("maxRawbitsIn", "maxOctIn,8,*");
rrdDef.datasource("rawbitsOut", "octOut,8,*");
rrdDef.datasource("minRawBitsOut", "minOctOut,8,*");
rrdDef.datasource("maxRawBitsOut", "minOctOut,8,*");
rrdDef.datasource("rawbitsOutNeg", "0,rawbitsOut,-");
rrdDef.datasource("rawtotBits","octIn,octOut,+,8,*");
rrdDef.datasource("bitsIn","rawbitsIn,UN,0,rawbitsIn,IF");
rrdDef.datasource("bitsOut","rawbitsOut,UN,0,rawbitsOut,IF");
rrdDef.datasource("totBits","rawtotBits,UN,0,rawtotBits,IF");
rrdDef.area("rawbitsIn", Color.GREEN, "In  ");
rrdDef.gprint("rawbitsIn", "AVERAGE", "AVG :%5.1lf %s");
rrdDef.gprint("rawbitsIn", "MIN", "MIN :%5.1lf %s");
rrdDef.gprint("rawbitsIn", "MAX", "MAX :%5.1lf %s");
strIn95Rounded = Math.round((in95 / 1000 / 1000))
strOut95Rounded = Math.round((out95 / 1000 / 1000))
rrdDef.hrule(in95, Color.BLACK, "95%: " + strIn95Rounded + "\\l" );
rrdDef.area("rawbitsOutNeg",Color.BLUE, "Out ");
rrdDef.gprint("rawbitsOut", "AVERAGE", "AVG :%5.1lf %s");
rrdDef.gprint("rawbitsOut", "MIN", "MIN :%5.1lf %s");
rrdDef.gprint("rawbitsOut", "MAX", "MAX :%5.1lf %s");
rrdDef.hrule(0 - out95, Color.RED, "95%: " + strOut95Rounded + "\\l");
rrdDef.setImageFormat("PNG");

if (options.g) {
	rrdGraph= new RrdGraph(rrdDef);
}

// For a more flexible output, this is an option:
//string95 = (String)("kMGTPE").charAt(exp-1) + "bps";
if (options.d) {
	println("95th percentiles (in : out): " + in95 + " : " + out95 + ". 95pct: " + String.format("%d Mbps", Math.round(max95 / 1000 / 1000)));
}
if (options.x) {
	print(dp.dump()); // dump() includes a newline at the end.
}
else { // Don't print the summary/total if the user requested a dump.
	println(dateText + " " + String.format("%d Mbps", Math.round(max95 / 1000 / 1000)));
}
